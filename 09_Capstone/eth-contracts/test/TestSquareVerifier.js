const SquareVerifier = artifacts.require('SquareVerifier');


contract('TestSquareVerifier', accounts => {

  const ownerAccount = accounts[0];

  // SquareVerifier contract
  let squareVerifier = null;

  describe('SquareVerifier Tests', () => {

    beforeEach(async () => {
      squareVerifier = await SquareVerifier.new({ from: ownerAccount });
    });

    it('verification succeeds with correct proof', async () => {
      // This proof was generated by running (using zokrates:0.3.3):
      // zokrates compute-witness -a 69 4761
      // zokrates generate-proof
      const proof = {
        'proof':
        {
          'A': ['0x6cc8db8a4d5ac6939796b6415fc85902f93b7215d53508c1d4d47bea04277b1', '0xd80cb78f6aa56278c53c9f77912aaaee853b3ba4df0c5f2634e5d559dbb9b9'],
          'A_p': ['0x1d2e19c8b049ea8df30ab48660cfae4f5a6a083a57403192abbdd3ccf6f941ad', '0x29134d8ff5c3675fc85a2d02aa2625ff52664b7e7ff276134352de722ad74e0d'],
          'B': [['0x26ffcb8bc26aadb07239e9988f2004094a23c5e0417bd4b15979527be5992bf0', '0x4ac9564dae8ef1906527fe90a3bfbf993c3cbdb00ac954b8671bd2f7e5d4176'],
          ['0xe0179e8299c97313b87b0c7e93ed492cb2ef14fe0c1c41496d76fde533d9344', '0x2db3a8c9e8db2be98a220e28b55124ed50d801631a80200ffd77a2ea495aca6e']],
          'B_p': ['0x1e1d7119cc1392131b3a62fc1a9e055a85d2ff1245137e831fe8d93c969f6519', '0x1fde3ed880bf2f21d2dacca3cec2ada383411d2c517da39088a47da5aab0af49'],
          'C': ['0xc200fa084b488f352fb0c2735de1320115d4acc7cda6fb36dd8d4fa34a2b386', '0x340bb0ca483e7d4ad64ef50abe1f8c6587f0b88d7c5529669ae07797fc79d9e'],
          'C_p': ['0x13ba7eecaba24a44c4d5c0162cabcaa835208b06dc3a2897f4e1164b623e7d61', '0x14a552cc88662430b11aede4b5992fb5ce3d0464f3ee3af21e79d93862731886'],
          'H': ['0x25ed7f62ad0c369d24a7045edd00c8b8a0d4934722955a8bfff29d89764359b8', '0x6de6dd10d38153812d049c7f048b9d3fd48723ff126a73d29d37818e8785727'],
          'K': ['0x2dcffeeb0fdf8b459d617f6eb1f4ae6b45a717e6ef3dadec74117f8aeccabd17', '0x5db1a26ea79494486b06daca0686f2479a6aa3fbe67774f9ca25a7acf56ed7e']
        },
        'input': [4761, 1]
      }
      const A = proof['proof']['A'];
      const A_p = proof['proof']['A_p'];
      const B = proof['proof']['B'];
      const B_p = proof['proof']['B_p'];
      const C = proof['proof']['C'];
      const C_p = proof['proof']['C_p'];
      const H = proof['proof']['H'];
      const K = proof['proof']['K'];
      const input = proof['input'];
      const isVerified = await squareVerifier.verifyTx.call(
        A, A_p, B, B_p, C, C_p, H, K, input, { from: ownerAccount });
      assert.isTrue(isVerified, 'Incorrect proof');
    });

    it('verification fails with incorrect proof', async () => {
      // This proof was generated by running (using zokrates:0.3.3):
      // zokrates compute-witness -a 5 25
      // zokrates generate-proof
      const proof = {
        'proof':
        {
          'A': ['0x1aea36807a96f6bac143c3c7d54054870e0993e645491bb18a5578a661a32837', '0x183af53725e3841f7f8008e636b630bf62c0aaa8dfec2606c85a9e9a88748e63'],
          'A_p': ['0x236675ecf2a2321e6fcb283fb875202797e4e31f5d3814f61d9d0d677b60f4fe', '0x137ac995f359753b01bd471fa49ee83b016e30da3f1feea47cf30d88eec30b6a'],
          'B': [['0x296c6695f4c8087725959dcc0c72a0edbbf9ec70d95d6d0b8a8e7161edb19690', '0x205827be02150a17b58f24952b151b0b8082f9e92b8280844cea9d17e119ca1b'],
          ['0x27cc177949fae6231dce9ba6a3dd763dff9190d6ec9c433b23adbdae5acffc3a', '0x255b2ae531f0e22b02f874845e4e666c694fb4a4a9debd7671031d93e430b38e']],
          'B_p': ['0x167207c80ad0dfa685bf7d106985518056bcd1be8c9bb0404f04deb83ff405b4', '0x13ae5730f1bd832e4e2bf3bf02c846abcf96f784d63bb03887d97c41af411644'],
          'C': ['0x2a8b4b50b21c265ff16d155b6e5e9a80945927d1fefea3febf3e17809e610a2b', '0x33ff37c9379faa0e92d68ccc0c00f0c76e70c8f7f8f0bd2efd4b4018f645ab0'],
          'C_p': ['0x2f296c4b6f284da6e7f66421ec35b92f25a3298e28df856a786730c125987ba8', '0x17e76577610205c10b281c2dbefed00a0077db15f4911498cfb2ad8ff0751e41'],
          'H': ['0x20f7d25a00d81b42d98d4bbd82d3353c9e17002a177c613c6a27474ca24f43d7', '0xf9d758f55210661e6d964ef00977660141d56413c56e5934e7854ab47ba1bbb'],
          'K': ['0x1f3532b3686ae0d46e11dc1a36474fda938a194cf594fcba2e71c8a23279af88', '0x845196cfc96df69c98ee73e37fee1b231e6c08c45e1ae0a06a6bf142b04853d']
        },
        'input': [25, 1]
      }
      const A = proof['proof']['A'];
      const A_p = proof['proof']['A_p'];
      const B = proof['proof']['B'];
      const B_p = proof['proof']['B_p'];
      const C = proof['proof']['C'];
      const C_p = proof['proof']['C_p'];
      const H = proof['proof']['H'];
      const K = proof['proof']['K'];
      const input = proof['input'];
      const isVerified = await squareVerifier.verifyTx.call(
        A, A_p, B, B_p, C, C_p, H, K, input, { from: ownerAccount });
      assert.isFalse(isVerified, 'Incorrect proof');
    });

  });
});
